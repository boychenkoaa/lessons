from bst1 import *
import unittest

class test_simpletree(unittest.TestCase):
    def test_init(self):
        bst = BST(BSTNode("a", "apple", None))
        self.assertEqual(str(bst), "a")
    
    def test_add (self):
        bst = BST(BSTNode("b", "banana", None))
        bst.AddKeyValue("a", "apple")
        bst.AddKeyValue("o", "orange")
        bst.AddKeyValue("w", "watermelon")
        bst.AddKeyValue("s", "strawberry")
        bst.AddKeyValue("c", "cherry")
        self.assertEqual(str(bst), "baocws")
        bst.AddKeyValue("a", "avocado")
        bst.AddKeyValue("c", "coconut")
        self.assertEqual(str(bst), "baocws")
        
    def test_find(self):
        bst = BST(BSTNode("b", "banana", None))
        bst.AddKeyValue("a", "apple")
        bst.AddKeyValue("o", "orange")
        bst.AddKeyValue("w", "watermelon")
        bst.AddKeyValue("s", "strawberry")
        bst_find_c = bst.FindNodeByKey("c")
        self.assertEqual(bst_find_c.Node.NodeKey, "o")
        self.assertEqual(bst_find_c.NodeHasKey, False)
        self.assertEqual(bst_find_c.ToLeft, True)
        
        bst.AddKeyValue("c", "cherry")
        bst_find_c = bst.FindNodeByKey("c")
        self.assertEqual(bst_find_c.Node.NodeKey, "c")
        self.assertEqual(bst_find_c.Node.NodeValue, "cherry")
        self.assertEqual(bst_find_c.NodeHasKey, True)
        
    def test_findMinMax(self):
        root =  BSTNode("b", "banana", None)
        bst = BST(root)
        bst.AddKeyValue("a", "apple")
        orange_node = bst.AddKeyValue("o", "orange")
        bst.AddKeyValue("w", "watermelon")
        strawberry_node = bst.AddKeyValue("s", "strawberry")
        bst.AddKeyValue("c", "cherry")
        min_from_root = bst.FinMinMax(root, FindMax=False)
        max_from_root = bst.FinMinMax(root, FindMax=True)
        min_from_orange =  bst.FinMinMax(orange_node, FindMax=False)
        max_from_orange =  bst.FinMinMax(orange_node, FindMax=True)
        self.assertEqual(min_from_root.NodeValue, "apple")
        self.assertEqual(max_from_root.NodeValue, "watermelon")
        self.assertEqual(min_from_orange.NodeValue, "cherry")
        self.assertEqual(max_from_orange.NodeValue, "watermelon")
    
    def test_delete(self):
        bst = BST(BSTNode("b", "banana", None))
        bst.AddKeyValue("a", "apple")
        bst.AddKeyValue("o", "orange")
        bst.AddKeyValue("w", "watermelon")
        bst.AddKeyValue("s", "strawberry")
        bst.AddKeyValue("c", "cherry")
        bst_find_c = bst.FindNodeByKey("o")
        self.assertEqual(bst_find_c.Node.NodeKey, "o")
        self.assertEqual(bst_find_c.Node.NodeValue, "orange")
        self.assertEqual(bst_find_c.NodeHasKey, True)
        self.assertEqual(str(bst), "baocws")
        bst.DeleteNodeByKey("o")
        self.assertEqual(str(bst), "bascw")
        bst.DeleteNodeByKey("c")
        bst_find_c = bst.FindNodeByKey("c")
        self.assertEqual(bst_find_c.Node.NodeKey, "s")
        self.assertEqual(bst_find_c.Node.NodeValue, "strawberry")
        self.assertEqual(bst_find_c.NodeHasKey, False)        
        self.assertEqual(str(bst), "basw")
        bst.DeleteNodeByKey("b")
        self.assertEqual(str(bst), "saw")
        bst.DeleteNodeByKey("a")
        self.assertEqual(str(bst), "sw")
        bst.DeleteNodeByKey("w")
        self.assertEqual(str(bst), "s")        
        bst.DeleteNodeByKey("s")
        self.assertEqual(str(bst), "")                
        
    def test_count(self):
        bst = BST(BSTNode("b", "banana", None))
        self.assertEqual(bst.Count(), 1)
        bst.AddKeyValue("a", "apple")
        self.assertEqual(bst.Count(), 2)
        bst.AddKeyValue("o", "orange")
        self.assertEqual(bst.Count(), 3)
        bst.AddKeyValue("w", "watermelon")
        self.assertEqual(bst.Count(), 4)
        bst.AddKeyValue("s", "strawberry")
        self.assertEqual(bst.Count(), 5)
        bst.AddKeyValue("c", "cherry")
        self.assertEqual(bst.Count(), 6)
        bst.DeleteNodeByKey("o")
        self.assertEqual(bst.Count(), 5)
        bst.DeleteNodeByKey("c")
        self.assertEqual(bst.Count(), 4)
        bst.DeleteNodeByKey("b")
        self.assertEqual(bst.Count(), 3)
        bst.DeleteNodeByKey("a")
        self.assertEqual(bst.Count(), 2)
        bst.DeleteNodeByKey("w")
        self.assertEqual(bst.Count(), 1)
                       
        
        
    
if __name__ == "__main__":
    unittest.main()
